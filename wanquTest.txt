export default class QueTestMaterial extends Laya.BaseMaterial {
    public static ShaderName : string = "QueTestShader";
    public static MainTxture: number =  Laya.Shader3D.propertyNameToID("u_texture");

    private static isInitShader = false;
    public static InitShader(){
        if(QueTestMaterial.isInitShader) return;
        QueTestMaterial.isInitShader = true;

        var attributeMap:Object = {
            'a_Position': Laya.VertexMesh.MESH_POSITION0, 
            'a_Normal': Laya.VertexMesh.MESH_NORMAL0, 
            'a_Texcoord': Laya.VertexMesh.MESH_TEXTURECOORDINATE0,
        };
        var uniformMap:Object = {
            'u_MvpMatrix': Laya.Shader3D.PERIOD_SPRITE, 
            'u_WorldMat': Laya.Shader3D.PERIOD_SPRITE, 
            'u_ITWorldMat': Laya.Shader3D.PERIOD_SPRITE, 
            'u_CameraPos': Laya.Shader3D.PERIOD_CAMERA, 
            'u_texture': Laya.Shader3D.PERIOD_MATERIAL, 
            'u_Bend': Laya.Shader3D.PERIOD_SCENE, 
            'u_Bias': Laya.Shader3D.PERIOD_SCENE, 
        };
        var vs:string = `
        #include "Lighting.glsl";
        attribute vec4 a_Position;
        attribute vec2 a_Texcoord;
        attribute vec3 a_Normal;

        uniform mat4 u_MvpMatrix;
        uniform mat4 u_WorldMat;
        uniform mat4 u_ITWorldMat;
        uniform vec3 u_CameraPos;
        uniform vec3 u_Bend;
        uniform vec3 u_Bias;

        varying vec2 v_Texcoord;

        void main()
        {
            vec4 worldPos = u_WorldMat * a_Position; 
            worldPos.xyz -= u_CameraPos;

            vec2 xyOff = max(vec2(0), vec2(-worldPos.z) - u_Bias.xy);
            xyOff *= xyOff;
            worldPos = vec4(u_Bend.x * xyOff.x, u_Bend.y * xyOff.y, 0, 0) * 0.001; 
            
            vec4 vertex = a_Position + u_ITWorldMat * worldPos;

            v_Texcoord = a_Texcoord.xy ;
            gl_Position=u_MvpMatrix * vertex;
            gl_Position=remapGLPositionZ(gl_Position); 
        }`;
        var ps:string = `
        precision highp float;

        uniform sampler2D u_texture;

        varying vec2 v_Texcoord;

        void main()
        {
            vec4 tex = texture2D(u_texture, v_Texcoord.xy);
            gl_FragColor = tex;
        }`;

        
        //创建自定义Shader
        var customShader:Laya.Shader3D = Laya.Shader3D.add(QueTestMaterial.ShaderName);
        //为Shader添加SubShader
		var subShader:Laya.SubShader = new Laya.SubShader(attributeMap, uniformMap, Laya.SkinnedMeshSprite3D.shaderDefines);
        customShader.addSubShader(subShader);
        //为SubShader添加ShaderPass
        subShader.addShaderPass(vs,ps);

    }
    constructor() {
        super()
        QueTestMaterial.InitShader();
        this.setShaderName(QueTestMaterial.ShaderName);
    }

      /**
     * 获取漫反射贴图。
     *  漫反射贴图。
     */
    public get diffuseTexture(): Laya.BaseTexture {
        return this._shaderValues.getTexture(QueTestMaterial.MainTxture);
    }

    public set diffuseTexture(value: Laya.BaseTexture) {
        this._shaderValues.setTexture(QueTestMaterial.MainTxture,value);
    }


}
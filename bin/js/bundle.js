var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameStart_1 = require("./script/GameStart");
var UIInGame_1 = require("./script/ui/UIInGame");
var UIMain_1 = require("./script/ui/UIMain");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("script/GameStart.ts", GameStart_1.default);
        reg("script/ui/UIInGame.ts", UIInGame_1.default);
        reg("script/ui/UIMain.ts", UIMain_1.default);
    };
    GameConfig.width = 1136;
    GameConfig.height = 640;
    GameConfig.scaleMode = "showall";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "UI/UIMain.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = false;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./script/GameStart":4,"./script/ui/UIInGame":19,"./script/ui/UIMain":20}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var GameCore_1 = require("./script/GameCore");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        GameConfig_1.default.height = 0; //调用默认生成的脚本方法
        if (window["Laya3D"])
            Laya3D.init(GameCore_1.default.width, GameCore_1.default.height);
        else
            Laya.init(GameCore_1.default.width, GameCore_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameCore_1.default.scaleMode;
        Laya.stage.screenMode = GameCore_1.default.screenMode;
        Laya.stage.alignH = GameCore_1.default.alignH;
        Laya.stage.alignV = GameCore_1.default.alignV;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameCore_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameCore_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameCore_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameCore_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        GameCore_1.default.Init();
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./script/GameCore":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MainState_1 = require("./State/MainState");
var UIManager_1 = require("./Managers/UIManager");
var StateManager_1 = require("./Managers/StateManager");
var ConfigManager_1 = require("./Managers/ConfigManager");
var GameCore = /** @class */ (function (_super) {
    __extends(GameCore, _super);
    //#endregion
    //#endregion  
    //#region 方法
    // "showall"
    function GameCore() {
        var _this = _super.call(this) || this;
        _this._mgrList = [];
        _this._dataUpdateTimer = 0;
        GameCore._core = _this;
        _this.layerLogic = Laya.stage.addChild(new Laya.Node());
        _this.layerScene = Laya.stage.addChild(new Laya.Sprite()); //可見最底层
        _this.layerUI = Laya.stage.addChild(new Laya.Sprite());
        _this.layerOver = Laya.stage.addChild(new Laya.Sprite());
        _this.mgrUI = UIManager_1.default.Creat();
        _this.mgrState = StateManager_1.default.Creat();
        _this.mgrConfig = ConfigManager_1.default.Creat();
        _this._mgrList.push(_this.mgrUI);
        _this._mgrList.push(_this.mgrState);
        _this.mgrConfig.LoadConfig(Laya.Handler.create(_this, _this.OnConfigLoaded));
        return _this;
    }
    Object.defineProperty(GameCore, "Core", {
        get: function () {
            if (GameCore._core == null) {
                var tnode = Laya.stage.addChild(new Laya.Node());
                var tsc = tnode.addComponent(GameCore);
            }
            return GameCore._core;
        },
        enumerable: true,
        configurable: true
    });
    GameCore.Init = function () {
        if (GameCore._core != null)
            return;
        GameCore.Core;
    };
    GameCore.DestroyCore = function () {
        if (GameCore._core != null) {
            GameCore._core.destroy();
            GameCore._core = null;
        }
    };
    GameCore.prototype.OnConfigLoaded = function () {
        this.mgrState.GotoState(new MainState_1.default());
    };
    GameCore.prototype.destroy = function () {
        this.layerLogic.destroy();
        this.layerScene.destroy();
        this.layerUI.destroy();
        this.layerOver.destroy();
        _super.prototype.destroy.call(this);
    };
    GameCore.prototype.onUpdate = function () {
        var dt = Math.min(Laya.timer.delta * 0.001, 0.5);
        var self = this;
        var tinterval = GameCore.dataUpdateInterval;
        var topentry = GameCore.openTryCache;
        var ttimer = self._dataUpdateTimer + dt;
        var tisUpdateData = false;
        if (ttimer >= tinterval) {
            tisUpdateData = true;
            self._dataUpdateTimer = ttimer;
        }
        var tlist = this._mgrList;
        for (var index = 0; index < tlist.length; index++) {
            var element = tlist[index];
            if (topentry) {
                try {
                    self.UpdateElement(element, dt, tisUpdateData);
                }
                catch (error) {
                    console.error(element.managerName + "---" + error);
                }
            }
            else {
                self.UpdateElement(element, dt, tisUpdateData);
            }
        }
    };
    GameCore.prototype.UpdateElement = function (element, dt, isUpdateData) {
        element.Update(dt);
        if (isUpdateData)
            element.UpdateData();
    };
    //#region config
    /**
 * <p>缩放模式。默认值为 "noscale"。</p>
 * <p><ul>取值范围：
 * <li>"noscale" ：不缩放；</li>
 * <li>"exactfit" ：全屏不等比缩放；</li>
 * <li>"showall" ：最小比例缩放；</li>
 * <li>"noborder" ：最大比例缩放；</li>
 * <li>"full" ：不缩放，stage的宽高等于屏幕宽高；</li>
 * <li>"fixedwidth" ：宽度不变，高度根据屏幕比缩放；</li>
 * <li>"fixedheight" ：高度不变，宽度根据屏幕比缩放；</li>
 * <li>"fixedauto" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>
 * </ul></p>
 */
    GameCore.width = 720;
    GameCore.height = 1280;
    GameCore.scaleMode = "showall";
    GameCore.screenMode = "none";
    GameCore.alignV = "center";
    GameCore.alignH = "middle";
    GameCore.startScene = "GameStart.scene";
    GameCore.sceneRoot = "";
    GameCore.debug = false;
    GameCore.stat = true;
    GameCore.physicsDebug = false;
    GameCore.exportSceneToJson = true;
    GameCore.dataUpdateInterval = 0.2;
    GameCore.openTryCache = false;
    //#endregion
    //#region core核心组件
    GameCore._core = null;
    return GameCore;
}(Laya.Script));
exports.default = GameCore;
},{"./Managers/ConfigManager":11,"./Managers/StateManager":12,"./Managers/UIManager":13,"./State/MainState":16}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameCore_1 = require("./GameCore");
var MainState_1 = require("./State/MainState");
/**
 * 本示例采用非脚本的方式实现，而使用继承页面基类，实现页面逻辑。在IDE里面设置场景的Runtime属性即可和场景进行关联
 * 相比脚本方式，继承式页面类，可以直接使用页面定义的属性（通过IDE内var属性定义），比如this.tipLbll，this.scoreLbl，具有代码提示效果
 * 建议：如果是页面级的逻辑，需要频繁访问页面内多个元素，使用继承式写法，如果是独立小模块，功能单一，建议用脚本方式实现，比如子弹脚本。
 */
var GameStart = /** @class */ (function (_super) {
    __extends(GameStart, _super);
    function GameStart() {
        return _super.call(this) || this;
    }
    GameStart.prototype.createChildren = function () {
        _super.prototype.createChildren.call(this);
        this.loadScene("GameStart");
    };
    GameStart.prototype.onAwake = function () {
        //Laya.Scene3D.load("testscene/level1.ls",Laya.Handler.create(this,this.onComplete));
        //添加3D场景
        // var tscene: Laya.Scene3D = this.addChild(new Laya.Scene3D()) as Laya.Scene3D;
        // this.owner3d = tscene;
        // var camera:Laya.Camera = (tscene.addChild(new Laya.Camera( 0, 0.1, 100))) as Laya.Camera;
        //     camera.transform.translate(new Laya.Vector3(1, 6, 10));
        //     camera.transform.rotate(new Laya.Vector3( -30, 0, 0), true, false);
        //     camera.clearColor = null;
        //     var directionLight:Laya.DirectionLight = tscene.addChild(new Laya.DirectionLight()) as Laya.DirectionLight;
        //     directionLight.diffuseColor = new Laya.Vector3(0.6, 0.6, 0.6);
        //     directionLight.transform.worldMatrix.setForward(new Laya.Vector3(1, -1, 0));
        //     //添加自定义模型
        //     var sphere:Laya.MeshSprite3D = tscene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(1,100,100))) as Laya.MeshSprite3D;
        //     sphere.transform.rotate(new Laya.Vector3(0,90,0),false,false);
        //     sphere.transform.translate(new Laya.Vector3(0,3,0));
        //     sphere.meshRenderer.material = new Laya.BlinnPhongMaterial;
        //     var material:Laya.BlinnPhongMaterial = new Laya.BlinnPhongMaterial();
        //     Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function(tex:Laya.Texture2D):void {
        //         material.albedoTexture = tex;
        //     }));
        //     sphere.meshRenderer.material = material;
        //     //添加物理组件
        //     sphere.addComponent(Laya.PhysicsCollider);
        //     //给球添加刚体
        //     var rigid:Laya.Rigidbody3D = sphere.addComponent(Laya.Rigidbody3D);
        //     //有刚体的shape要加在刚体上
        //     rigid.colliderShape = new Laya.SphereColliderShape(1);
        //     //添加一个地板
        //     var floor:Laya.MeshSprite3D = tscene.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createPlane(10,10))) as Laya.MeshSprite3D;
        //     //给地板添加物理组件
        //     var floorCollicar:Laya.PhysicsCollider = floor.addComponent(Laya.PhysicsCollider);
        //     // 添加collidershape
        //     floorCollicar.colliderShape = new Laya.BoxColliderShape(10,0,10);
        //     //克隆一个球                
        //     Laya.timer.once(1000,this,function():void{
        //       //一秒之后复制一个球
        //          var cloneSphere:Laya.MeshSprite3D = Laya.Sprite3D.instantiate(sphere) as Laya.MeshSprite3D;
        //         //设置位置偏移
        //          cloneSphere.transform.translate(new Laya.Vector3(1,4,0));
        //         //添加到场景
        //         tscene.addChild(cloneSphere);
        //     });
        Laya.Scene3D.load('testscene/level1.ls', Laya.Handler.create(this, this.onComplete));
        console.log(this.btn_texttest);
        console.log(this.testScene_btn);
        // var testcount = 0;
        // this.testScene_btn.on(laya.events.Event.CLICK, this, function () { this.btn_texttest.text = String(testcount); testcount++; });
        GameCore_1.default.Core.mgrState.GotoState(new MainState_1.default());
        // GameCore.mgrUI.ShowUI("UIMain",function(sui){
        //     console.log(sui);
        // });
        // Laya.Scene.load("prefab/testimage.prefab",Laya.Handler.create(this,function(res){
        //     this.addChild(res);
        // }));
    };
    GameStart.prototype.onComplete = function (sceneres) {
        // 将场景加到舞台上
        GameCore_1.default.Core.layerScene.addChild(sceneres);
        // this.addChildAt(sceneres,0);
        //     //添加自定义模型
        var sphere = sceneres.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createSphere(1, 100, 100)));
        sphere.transform.rotate(new Laya.Vector3(0, 90, 0), false, false);
        sphere.transform.translate(new Laya.Vector3(0, 3, 0));
        sphere.meshRenderer.material = new Laya.BlinnPhongMaterial;
        var material = new Laya.BlinnPhongMaterial();
        Laya.Texture2D.load("res/layabox.png", Laya.Handler.create(null, function (tex) {
            material.albedoTexture = tex;
        }));
        sphere.meshRenderer.material = material;
        //添加物理组件
        sphere.addComponent(Laya.PhysicsCollider);
        //给球添加刚体
        var rigid = sphere.addComponent(Laya.Rigidbody3D);
        rigid.colliderShape = new Laya.SphereColliderShape(1);
        // this.removeSelf();
    };
    return GameStart;
}(Laya.Scene));
exports.default = GameStart;
},{"./GameCore":3,"./State/MainState":16}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Asset;
(function (Asset) {
    var AssetLoader = /** @class */ (function () {
        function AssetLoader() {
            this._assets = [];
        }
        AssetLoader.Load = function (url, complete, progress, type, priority, cache, group, ignoreCache, useWorkerLoader) {
            Laya.loader.load(url, Laya.Handler.create(this, function (event) {
                if (complete != null) {
                    complete.runWith(event);
                }
            }), progress, type, priority, cache, group, ignoreCache, useWorkerLoader);
        };
        AssetLoader.Creat = function (url, complete, progress, type, constructParams, propertyParams, priority, cache) {
            Laya.loader.create(url, Laya.Handler.create(this, function (event) {
                if (complete != null) {
                    complete.runWith(event);
                }
            }), progress, type, constructParams, propertyParams, priority, cache);
        };
        return AssetLoader;
    }());
    Asset.AssetLoader = AssetLoader;
})(Asset = exports.Asset || (exports.Asset = {}));
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Log;
(function (Log) {
    var LogColor;
    (function (LogColor) {
        LogColor[LogColor["NONE"] = 0] = "NONE";
        LogColor[LogColor["BLUE"] = 1] = "BLUE";
        LogColor[LogColor["YELLO"] = 2] = "YELLO";
        LogColor[LogColor["RED"] = 3] = "RED";
        LogColor[LogColor["GREEN"] = 4] = "GREEN";
        LogColor[LogColor["AQUA"] = 5] = "AQUA";
        LogColor[LogColor["WHITE"] = 6] = "WHITE";
    })(LogColor = Log.LogColor || (Log.LogColor = {}));
    var DLogType;
    (function (DLogType) {
        DLogType[DLogType["Log"] = 1] = "Log";
        DLogType[DLogType["Warning"] = 2] = "Warning";
        DLogType[DLogType["Error"] = 3] = "Error";
        DLogType[DLogType["Assert"] = 4] = "Assert";
        DLogType[DLogType["TrueLog"] = 5] = "TrueLog";
    })(DLogType = Log.DLogType || (Log.DLogType = {}));
    var DLog = /** @class */ (function () {
        function DLog() {
        }
        DLog.IsShow = function (pType) {
            var ret = pType - DLog.MinLogType;
            if (ret < 0)
                return false;
            return true;
        };
        DLog.ColorString = function (_color) {
            var ret;
            switch (_color) {
                case LogColor.BLUE:
                    ret = "<color=blue>";
                    break;
                case LogColor.YELLO:
                    ret = "<color=yellow>";
                    break;
                case LogColor.RED:
                    ret = "<color=red>";
                    break;
                case LogColor.GREEN:
                    ret = "<color=green>";
                    break;
                case LogColor.AQUA:
                    ret = "<color=aqua>";
                    break;
                case LogColor.WHITE:
                    ret = "<color=white>";
                    break;
            }
            return ret;
        };
        DLog.LOGColor = function (pType, pMsg, pColor) {
            if (!DLog.IsShow(pType))
                return;
            switch (pType) {
                case DLogType.TrueLog:
                case DLogType.Log:
                    console.log(pMsg);
                    break;
                case DLogType.Error:
                    console.error(pMsg);
                    break;
                case DLogType.Warning:
                    console.warn(pMsg);
                    break;
                case DLogType.Assert:
                    console.assert(false, pMsg);
                    break;
                default:
                    break;
            }
        };
        DLog.Log = function (pObject) {
            if (!DLog.IsShow(DLogType.Log))
                return;
            DLog.LOGColor(DLogType.Log, pObject, LogColor.NONE);
        };
        DLog.LogWarning = function (pObject) {
            if (!DLog.IsShow(DLogType.Warning))
                return;
            DLog.LOGColor(DLogType.Warning, pObject, LogColor.NONE);
        };
        DLog.LogError = function (pObject) {
            if (!DLog.IsShow(DLogType.Error))
                return;
            DLog.LOGColor(DLogType.Error, pObject, LogColor.NONE);
        };
        DLog.LogAssertion = function (pObject) {
            if (!DLog.IsShow(DLogType.Assert))
                return;
            DLog.LOGColor(DLogType.Assert, pObject, LogColor.NONE);
        };
        DLog.MinLogType = DLogType.Log;
        return DLog;
    }());
    Log.DLog = DLog;
})(Log = exports.Log || (exports.Log = {}));
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventManager = /** @class */ (function () {
    function EventManager() {
        this.eventHandles = [];
    }
    Object.defineProperty(EventManager, "Instance", {
        get: function () {
            if (EventManager._instance == null)
                EventManager._instance = new EventManager();
            return EventManager._instance;
        },
        enumerable: true,
        configurable: true
    });
    EventManager.RegEvent = function (eventKey, callBack) {
        if (EventManager.Instance.eventHandles[eventKey] == null)
            EventManager.Instance.eventHandles[eventKey] = new EventGroup(eventKey);
        EventManager.Instance.eventHandles[eventKey].Add(callBack);
    };
    EventManager.UnRegEvent = function (eventKey, callBack) {
        if (EventManager.Instance.eventHandles[eventKey] == null)
            return;
        EventManager.Instance.eventHandles[eventKey].Remove(callBack);
    };
    EventManager.DispatchEvent = function (eventKey, data) {
        if (EventManager.Instance.eventHandles[eventKey] == null)
            return;
        EventManager.Instance.eventHandles[eventKey].DispatchEvent(data);
    };
    EventManager._instance = null;
    return EventManager;
}());
exports.default = EventManager;
var EventGroup = /** @class */ (function () {
    function EventGroup(key) {
        this._calls = [];
        this.EventKey = key;
    }
    EventGroup.prototype.Add = function (callBack) {
        var tindex = this._calls.indexOf(callBack);
        if (tindex !== -1)
            return;
        this._calls.push(callBack);
    };
    EventGroup.prototype.Remove = function (callBack) {
        var tindex = this._calls.indexOf(callBack);
        if (tindex !== -1)
            this._calls.splice(tindex, 1);
    };
    EventGroup.prototype.DispatchEvent = function (data) {
        for (var i = 0; i < this._calls.length; i++) {
            var element = this._calls[i];
            element.runWith(data);
        }
    };
    return EventGroup;
}());
exports.EventGroup = EventGroup;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventManager_1 = require("./Event/EventManager");
var Dlog_1 = require("./Dlog");
var NodePool_1 = require("./Pool/NodePool");
var AssetLoader_1 = require("./Asset/AssetLoader");
var LE;
(function (LE) {
    var AssetLoader = /** @class */ (function (_super) {
        __extends(AssetLoader, _super);
        function AssetLoader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AssetLoader;
    }(AssetLoader_1.Asset.AssetLoader));
    LE.AssetLoader = AssetLoader;
    var Event = /** @class */ (function (_super) {
        __extends(Event, _super);
        function Event() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Event;
    }(EventManager_1.default));
    LE.Event = Event;
    var DLog = /** @class */ (function (_super) {
        __extends(DLog, _super);
        function DLog() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return DLog;
    }(Dlog_1.Log.DLog));
    LE.DLog = DLog;
    var NodePool = /** @class */ (function (_super) {
        __extends(NodePool, _super);
        function NodePool() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NodePool;
    }(NodePool_1.Pool.NodePool));
    LE.NodePool = NodePool;
})(LE = exports.LE || (exports.LE = {}));
},{"./Asset/AssetLoader":5,"./Dlog":6,"./Event/EventManager":7,"./Pool/NodePool":9}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Pool;
(function (Pool) {
    var NodePool = /** @class */ (function () {
        function NodePool() {
            this._groupList = [];
        }
        NodePool.prototype.SetCreater = function (pCreater) {
            this._creater = pCreater;
        };
        NodePool.prototype.SetDestroyer = function (pDestroyer) {
            this._destroyer = pDestroyer;
        };
        NodePool.prototype.Get = function (pKey) {
            if (pKey == null || pKey.length == 0)
                return;
            var tgp = this._groupList[pKey];
            var ret;
            if (tgp != null)
                ret = tgp.Get();
            if (ret == null && this._creater != null)
                ret = this._creater(pKey);
            return ret;
        };
        NodePool.prototype.Push = function (pKey, pNode) {
            var n = this;
            var tgp;
            if (n._groupList[pKey] == null)
                n._groupList[pKey] = new NodeGroup(pKey);
            tgp = n._groupList[pKey];
            tgp.Push(pNode);
        };
        NodePool.prototype.Clear = function () {
            var tlist = this._groupList;
            for (var key in tlist) {
                if (tlist.hasOwnProperty(key)) {
                    var e = tlist[key];
                    e.Clear(this._destroyer);
                }
            }
            this._groupList = [];
        };
        return NodePool;
    }());
    Pool.NodePool = NodePool;
    var NodeGroup = /** @class */ (function () {
        function NodeGroup(pKey) {
            this._queue = [];
            this.Key = pKey;
        }
        NodeGroup.prototype.Get = function () {
            var n = this;
            if (n._queue == null || n._queue.length == 0)
                return null;
            return n._queue.pop();
        };
        NodeGroup.prototype.Push = function (pNode) {
            var n = this;
            if (n._queue == null)
                n._queue = [];
            if (n._queue.indexOf(pNode) == -1)
                n._queue.push(pNode);
        };
        NodeGroup.prototype.Clear = function (pDestroyer) {
            var tlist = this._queue;
            for (var i = 0; i < tlist.length; i++) {
                var e = tlist[i];
                tlist[i] = null;
                if (pDestroyer != null)
                    pDestroyer(e);
            }
            tlist = null;
        };
        return NodeGroup;
    }());
    Pool.NodeGroup = NodeGroup;
})(Pool = exports.Pool || (exports.Pool = {}));
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager = /** @class */ (function () {
    function BaseManager(nd, nameStr) {
        this._node = nd;
        this.managerName = nameStr;
    }
    BaseManager.Creat = function () {
        return null;
    };
    BaseManager.prototype.Update = function (dt) {
    };
    BaseManager.prototype.UpdateData = function () {
    };
    return BaseManager;
}());
exports.default = BaseManager;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var LE_1 = require("../LitEngine/LE");
var ConfigManager = /** @class */ (function (_super) {
    __extends(ConfigManager, _super);
    function ConfigManager() {
        var _this = _super.call(this, null, "ConfigManager") || this;
        _this._configList = [];
        return _this;
    }
    ConfigManager.Creat = function () {
        return new ConfigManager();
    };
    ConfigManager.prototype.LoadConfig = function (pHandle) {
        this._loadCall = pHandle;
        LE_1.LE.AssetLoader.Load("resources/Config/ConfigList.json", Laya.Handler.create(this, this.OnListLoaded));
    };
    ConfigManager.prototype.OnListLoaded = function (pListobj) {
        this._cfgListObj = pListobj;
        var assets = [];
        var tlist = this._cfgListObj.configList;
        for (var index = 0; index < tlist.length; index++) {
            assets.push(tlist[index].filePath);
        }
        LE_1.LE.AssetLoader.Load(assets, Laya.Handler.create(this, this.OnCfgLoaded));
    };
    ConfigManager.prototype.OnCfgLoaded = function () {
        var tcfglist = this._configList;
        var tlist = this._cfgListObj.configList;
        for (var index = 0; index < tlist.length; index++) {
            var elment = tlist[index];
            var tcfg = Laya.Loader.getRes(elment.filePath);
            tcfglist[elment.key] = tcfg;
        }
        if (this._loadCall != null)
            this._loadCall.run();
    };
    ConfigManager.prototype.GetConfig = function (key) {
        var tcfglist = this._configList;
        if (tcfglist[key] == null) {
            console.error("Cant not found config.key = " + key);
            return null;
        }
        return tcfglist[key];
    };
    return ConfigManager;
}(BaseManager_1.default));
exports.default = ConfigManager;
},{"../LitEngine/LE":8,"./BaseManager":10}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseManager_1 = require("./BaseManager");
var StateBase_1 = require("../State/StateBase");
var StateManager = /** @class */ (function (_super) {
    __extends(StateManager, _super);
    function StateManager(nd) {
        return _super.call(this, nd, "StateManager") || this;
    }
    StateManager.Creat = function () {
        return new StateManager(null);
    };
    Object.defineProperty(StateManager.prototype, "CurState", {
        get: function () {
            return this._curState;
        },
        enumerable: true,
        configurable: true
    });
    StateManager.prototype.GotoState = function (state, pData) {
        var tlast = this._curState;
        Laya.loader.clearUnLoaded(); //必须确保切换前没有正在加载的资源.否则会有内存问题
        if (tlast != null) {
            if (tlast.name == state.name || tlast.State == StateBase_1.State.StateType.onEnter)
                return;
            tlast.OnExit();
        }
        this._curState = state;
        state.OnEnter(Laya.Handler.create(this, this.OnCurStateLoaded), pData);
    };
    StateManager.prototype.OnCurStateLoaded = function () {
        // if (this._lastState != null)
        //     this._lastState.OnExit();
        Laya.Resource.destroyUnusedResources();
    };
    StateManager.prototype.Update = function (dt) {
        var tcur = this._curState;
        if (tcur != null && tcur.State == StateBase_1.State.StateType.Loaded) {
            tcur.Update(dt);
        }
    };
    StateManager.prototype.UpdateData = function () {
        var tcur = this._curState;
        if (tcur != null && tcur.State == StateBase_1.State.StateType.Loaded) {
            tcur.UpdateData();
        }
    };
    return StateManager;
}(BaseManager_1.default));
exports.default = StateManager;
},{"../State/StateBase":17,"./BaseManager":10}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameCore_1 = require("../GameCore");
var UIBase_1 = require("../ui/UIBase");
var BaseManager_1 = require("./BaseManager");
var UIManager = /** @class */ (function (_super) {
    __extends(UIManager, _super);
    function UIManager(nd) {
        var _this = _super.call(this, nd, "UIManager") || this;
        _this._uiList = [];
        _this.uiPath = "UI/";
        _this.uiLastName = ".scene";
        return _this;
    }
    UIManager.Creat = function () {
        var tnode = GameCore_1.default.Core.layerUI.addChild(new Laya.Sprite());
        tnode.name = "UImanagerNode";
        return new UIManager(tnode);
    };
    UIManager.prototype.ShowUI = function (uiName, method) {
        var tmgr = this;
        if (tmgr._uiList[uiName] == null) {
            var tfullpathname = tmgr.uiPath + uiName + tmgr.uiLastName;
            Laya.Scene.load(tfullpathname, Laya.Handler.create(tmgr, function (sc) {
                var tui = sc.getComponent(UIBase_1.default);
                tui.parent = tmgr._node;
                if (tui == null) {
                    console.error("Cant found uibase on " + tfullpathname + ".please check your scene.");
                }
                else {
                    tmgr._uiList[uiName] = tui;
                    tui.active = true;
                    if (method != null)
                        method.run();
                }
            }));
        }
        else {
            var tui = tmgr._uiList[uiName];
            tui.active = true;
            if (method != null)
                method.run();
        }
    };
    UIManager.prototype.HideUI = function (uiName) {
        var tmgr = this;
        var tui = tmgr._uiList[uiName];
        if (tui != null) {
            tui.active = false;
        }
    };
    UIManager.prototype.DestoryUI = function (uiName) {
        var tmgr = this;
        var tui = tmgr._uiList[uiName];
        if (tui != null) {
            tmgr._uiList[uiName] = null;
            tui.destroyUI();
        }
    };
    UIManager.prototype.UpdateData = function () {
        var tlist = this._uiList;
        for (var key in tlist) {
            if (tlist.hasOwnProperty(key)) {
                var element = tlist[key];
                if (element == null || !element.active)
                    continue;
                element.UpdateData();
            }
        }
    };
    return UIManager;
}(BaseManager_1.default));
exports.default = UIManager;
},{"../GameCore":3,"../ui/UIBase":18,"./BaseManager":10}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var InGameModule = /** @class */ (function () {
    function InGameModule(pScName) {
    }
    InGameModule.prototype.GetScene = function () {
    };
    //#region init
    InGameModule.prototype.Init = function (fun) {
    };
    InGameModule.prototype.OnAssetsPreLoaded = function (event) {
    };
    InGameModule.prototype.OnUILoaded = function () {
        this.Run();
    };
    //#endregion
    //#region running
    InGameModule.prototype.Run = function () {
    };
    InGameModule.prototype.Pause = function () { };
    InGameModule.prototype.Resume = function () { };
    InGameModule.prototype.Destroy = function () {
    };
    //#endregion
    //#region update
    InGameModule.prototype.Update = function (dt) {
    };
    InGameModule.prototype.UpdateData = function () {
    };
    //#endregion
    //#region call
    //#endregion
    InGameModule.prototype.ModuleEvent = function (pEventData) {
    };
    return InGameModule;
}());
exports.default = InGameModule;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var InGameModule_1 = require("../Module/InGameModule");
var StateBase_1 = require("./StateBase");
var InGameState = /** @class */ (function (_super) {
    __extends(InGameState, _super);
    function InGameState() {
        return _super.call(this, "InGameState") || this;
    }
    InGameState.prototype.OnEnter = function (fun, pData) {
        _super.prototype.OnEnter.call(this, fun, pData);
        this._module = new InGameModule_1.default(String(pData));
        this._module.Init(Laya.Handler.create(this, this.OnGameLoaded));
    };
    InGameState.prototype.OnGameLoaded = function (obj) {
        this.OnLoaded();
    };
    InGameState.prototype.OnExit = function () {
        _super.prototype.OnExit.call(this);
    };
    InGameState.prototype.OnLoaded = function () {
        _super.prototype.OnLoaded.call(this);
    };
    InGameState.prototype.Update = function (dt) {
        _super.prototype.Update.call(this, dt);
    };
    InGameState.prototype.UpdateData = function () {
        _super.prototype.UpdateData.call(this);
    };
    return InGameState;
}(StateBase_1.State.StateBase));
exports.default = InGameState;
},{"../Module/InGameModule":14,"./StateBase":17}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameCore_1 = require("../GameCore");
var StateBase_1 = require("./StateBase");
var MainState = /** @class */ (function (_super) {
    __extends(MainState, _super);
    function MainState() {
        return _super.call(this, "MainState") || this;
    }
    MainState.prototype.OnEnter = function (fun, pData) {
        _super.prototype.OnEnter.call(this, fun, pData);
        GameCore_1.default.Core.mgrUI.ShowUI("UIMain", Laya.Handler.create(this, function () {
            this.OnLoaded();
        }));
    };
    MainState.prototype.OnExit = function () {
        GameCore_1.default.Core.mgrUI.DestoryUI("UIMain");
        _super.prototype.OnExit.call(this);
    };
    MainState.prototype.OnLoaded = function () {
        _super.prototype.OnLoaded.call(this);
    };
    return MainState;
}(StateBase_1.State.StateBase));
exports.default = MainState;
},{"../GameCore":3,"./StateBase":17}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State;
(function (State) {
    var StateType;
    (function (StateType) {
        StateType[StateType["none"] = 0] = "none";
        StateType[StateType["onEnter"] = 1] = "onEnter";
        StateType[StateType["onExit"] = 2] = "onExit";
        StateType[StateType["Loaded"] = 3] = "Loaded";
    })(StateType = State.StateType || (State.StateType = {}));
    var StateBase = /** @class */ (function () {
        function StateBase(nstr) {
            this._state = StateType.none;
            this.name = nstr;
        }
        Object.defineProperty(StateBase.prototype, "CurModule", {
            get: function () {
                return this._module;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StateBase.prototype, "State", {
            get: function () {
                return this._state;
            },
            enumerable: true,
            configurable: true
        });
        StateBase.prototype.OnEnter = function (fun, pData) {
            this._state = StateType.onEnter;
            this._onLoaded = fun;
        };
        StateBase.prototype.OnExit = function () {
            var tmodule = this._module;
            if (tmodule != null)
                tmodule.Destroy();
            this._state = StateType.onExit;
        };
        StateBase.prototype.OnLoaded = function () {
            this._state = StateType.Loaded;
            if (this._onLoaded != null)
                this._onLoaded.run();
        };
        StateBase.prototype.Update = function (dt) {
            var tmodule = this._module;
            if (tmodule != null)
                tmodule.Update(dt);
        };
        StateBase.prototype.UpdateData = function () {
            var tmodule = this._module;
            if (tmodule != null)
                tmodule.UpdateData();
        };
        return StateBase;
    }());
    State.StateBase = StateBase;
})(State = exports.State || (exports.State = {}));
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UIBase = /** @class */ (function (_super) {
    __extends(UIBase, _super);
    function UIBase() {
        var _this = _super.call(this) || this;
        _this._active = false;
        return _this;
    }
    Object.defineProperty(UIBase.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (value) {
            this._parent = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBase.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (value) {
            this._active = value;
            if (!value) {
                this.owner.removeSelf();
            }
            else {
                if (this.parent != null)
                    this.parent.addChild(this.owner);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIBase.prototype, "nodeScene", {
        get: function () {
            return this.owner;
        },
        enumerable: true,
        configurable: true
    });
    UIBase.prototype.destroyUI = function () {
        this.owner.destroy();
    };
    UIBase.prototype.UpdateData = function () {
    };
    return UIBase;
}(Laya.Script));
exports.default = UIBase;
},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UIBase_1 = require("./UIBase");
var GameCore_1 = require("../GameCore");
var MainState_1 = require("../State/MainState");
var UIMain = /** @class */ (function (_super) {
    __extends(UIMain, _super);
    function UIMain() {
        return _super.call(this) || this;
    }
    UIMain.prototype.onAwake = function () {
        this.backbtn = this.owner.getChildByName("backbtn");
        this.backbtn.on(laya.events.Event.CLICK, this, function () {
            GameCore_1.default.Core.mgrState.GotoState(new MainState_1.default());
        });
    };
    return UIMain;
}(UIBase_1.default));
exports.default = UIMain;
},{"../GameCore":3,"../State/MainState":16,"./UIBase":18}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UIBase_1 = require("./UIBase");
var GameCore_1 = require("../GameCore");
var InGameState_1 = require("../State/InGameState");
var UIMain = /** @class */ (function (_super) {
    __extends(UIMain, _super);
    function UIMain() {
        return _super.call(this) || this;
    }
    UIMain.prototype.onAwake = function () {
        this.testbutton = this.owner.getChildByName("testbutton");
        var testcount = 0;
        this.testbutton.on(laya.events.Event.CLICK, this, function () {
            GameCore_1.default.Core.mgrState.GotoState(new InGameState_1.default(), "1001");
        });
    };
    UIMain.prototype.onEnable = function () {
    };
    UIMain.prototype.onDisable = function () {
    };
    return UIMain;
}(UIBase_1.default));
exports.default = UIMain;
},{"../GameCore":3,"../State/InGameState":15,"./UIBase":18}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
